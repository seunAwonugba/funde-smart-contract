{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"contracts/PriceConverter.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nerror FundMe__UnAuthorized();\r\n\r\ncontract FundMe {\r\n    uint public constant minUSD = 5 * 1e18;\r\n    address private owner;\r\n    // using PriceConverter for uint256;\r\n\r\n    AggregatorV3Interface private priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert FundMe__UnAuthorized();\r\n        }\r\n        _;\r\n    }\r\n\r\n    //ket track of eveyone that sent money , store their address in funders array\r\n    address[] private s_funders;\r\n\r\n    mapping(address => uint) private amountSent;\r\n\r\n    function fund() public payable {\r\n        //set min fund value in USD\r\n\r\n        // require(getConversionRate(msg.value) >= minUSD, \"Insufficient funds\");\r\n\r\n        require(\r\n            PriceConverter.getConversionRate(msg.value, priceFeed) >= minUSD,\r\n            \"Insufficient funds\"\r\n        );\r\n        s_funders.push(msg.sender);\r\n\r\n        //set the mapping value\r\n        amountSent[msg.sender] = msg.value;\r\n\r\n        //0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        // require(owner == msg.sender, \"Only owners can withdraw\");\r\n        for (uint i = 0; i < s_funders.length; i++) {\r\n            address fundersAddress = s_funders[i];\r\n            amountSent[fundersAddress] = 0;\r\n        }\r\n\r\n        //reset funders array\r\n        s_funders = new address[](0);\r\n\r\n        //withdraw the money to the person calling this function\r\n        //3 ways to transfer\r\n\r\n        // 1. Using transfer method\r\n\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n\r\n        // // 2. Using send method\r\n\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send not successful\");\r\n\r\n        // 2. Using call method\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: (address(this).balance)\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function cheaperWithdrawal() public payable onlyOwner {\r\n        address[] memory m_funders = s_funders;\r\n        for (uint i = 0; i < m_funders.length; i++) {\r\n            address fundersAddress = m_funders[i];\r\n            amountSent[fundersAddress] = 0;\r\n        }\r\n\r\n        m_funders = new address[](0);\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: (address(this).balance)\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getFunders(uint index) public view returns (address) {\r\n        return s_funders[index];\r\n    }\r\n\r\n    function getAmountSent(address funder) public view returns (uint) {\r\n        return amountSent[funder];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return priceFeed;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    //get price of eth in USD using an oracle to help communicate with external world\r\n\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint(answer * 1e10);\r\n    }\r\n\r\n    // get price always return lates price of 1eth to dolls\r\n\r\n    function getConversionRate(\r\n        uint _ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint) {\r\n        uint ethPrice = getPrice(priceFeed);\r\n        uint ethAmountInUSD = (ethPrice * _ethAmount) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}